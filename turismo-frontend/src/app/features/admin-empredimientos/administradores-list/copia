import { Component, OnInit, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule, ActivatedRoute } from '@angular/router';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { EmprendimientoAdminService } from '../../../core/services/emprendimiento-admin.service';
import { Emprendimiento, AdminRequest } from '../../../core/models/emprendimiento-admin.model';
import { User } from '../../../core/models/user.model';

@Component({
  selector: 'app-administradores-list',
  standalone: true,
  imports: [CommonModule, RouterModule, ReactiveFormsModule],
  template: `
    <div class="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800">
      <!-- Header -->
      <header class="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div class="flex items-center justify-between">
            <div>
              <nav class="flex mb-3" aria-label="Breadcrumb">
                <ol class="inline-flex items-center space-x-1 md:space-x-3">
                  <li class="inline-flex items-center">
                    <a routerLink="/admin-emprendedores/mis-emprendimientos" 
                       class="text-gray-700 dark:text-gray-300 hover:text-orange-600 dark:hover:text-orange-400">
                      Mis Emprendimientos
                    </a>
                  </li>
                  <li>
                    <div class="flex items-center">
                      <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                      </svg>
                      <a [routerLink]="['/admin-emprendedores/emprendimiento', emprendimientoId]" 
                         class="ml-1 text-gray-700 dark:text-gray-300 hover:text-orange-600 dark:hover:text-orange-400">
                        {{ emprendimiento?.nombre || 'Emprendimiento' }}
                      </a>
                    </div>
                  </li>
                  <li>
                    <div class="flex items-center">
                      <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                      </svg>
                      <span class="ml-1 text-gray-500 dark:text-gray-400">Administradores</span>
                    </div>
                  </li>
                </ol>
              </nav>
              <h1 class="text-3xl font-bold text-gray-900 dark:text-white">
                Administradores - {{ emprendimiento?.nombre || 'Cargando...' }}
              </h1>
              <p class="text-gray-600 dark:text-gray-400 mt-1">
                Gestiona quién puede administrar este emprendimiento
              </p>
            </div>
            <div class="flex items-center space-x-4">
              <button (click)="refreshData()" 
                      [disabled]="loading"
                      class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 disabled:opacity-50">
                <svg *ngIf="!loading" class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                <div *ngIf="loading" class="w-4 h-4 mr-2 animate-spin rounded-full border-2 border-gray-400 border-t-transparent"></div>
                Actualizar
              </button>
            </div>
          </div>
        </div>
      </header>

      <!-- Loading State -->
      <div *ngIf="loading && !emprendimiento" class="flex justify-center items-center py-20">
        <div class="relative">
          <div class="w-16 h-16 border-4 border-orange-200 rounded-full"></div>
          <div class="w-16 h-16 border-4 border-orange-600 border-t-transparent rounded-full animate-spin absolute top-0"></div>
        </div>
      </div>

      <!-- Error State -->
      <div *ngIf="error" class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6">
          <div class="flex">
            <div class="flex-shrink-0">
              <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
              </svg>
            </div>
            <div class="ml-3">
              <h3 class="text-sm font-medium text-red-800 dark:text-red-200">Error</h3>
              <div class="mt-2 text-sm text-red-700 dark:text-red-300">{{ error }}</div>
              <div class="mt-4">
                <button (click)="loadEmprendimiento()" 
                        class="bg-red-100 dark:bg-red-800 px-3 py-2 rounded-md text-sm font-medium text-red-800 dark:text-red-200 hover:bg-red-200 dark:hover:bg-red-700">
                  Reintentar
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Main Content -->
      <main *ngIf="emprendimiento && !error" class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8 space-y-8">
        
        <!-- Add Administrator Form -->
        <div class="bg-white dark:bg-gray-800 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700">
          <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-medium text-gray-900 dark:text-white">Agregar Administrador</h3>
            <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
              Invita a un usuario a administrar este emprendimiento
            </p>
          </div>
          <div class="p-6">
            <form [formGroup]="adminForm" (ngSubmit)="addAdministrador()" class="space-y-4">
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <!-- Email -->
                <div>
                  <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Email del Usuario *
                  </label>
                  <input
                    type="email"
                    id="email"
                    formControlName="email"
                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-orange-500 focus:border-orange-500 dark:bg-gray-700 dark:text-white"
                    placeholder="usuario@ejemplo.com">
                  <div *ngIf="adminForm.get('email')?.invalid && adminForm.get('email')?.touched" 
                       class="mt-1 text-sm text-red-600 dark:text-red-400">
                    <div *ngIf="adminForm.get('email')?.errors?.['required']">El email es requerido</div>
                    <div *ngIf="adminForm.get('email')?.errors?.['email']">Formato de email inválido</div>
                  </div>
                </div>

                <!-- Rol -->
                <div>
                  <label for="rol" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Rol *
                  </label>
                  <select
                    id="rol"
                    formControlName="rol"
                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-orange-500 focus:border-orange-500 dark:bg-gray-700 dark:text-white">
                    <option value="">Seleccionar rol</option>
                    <option value="administrador">Administrador</option>
                    <option value="colaborador">Colaborador</option>
                    <option value="moderador">Moderador</option>
                  </select>
                  <div *ngIf="adminForm.get('rol')?.invalid && adminForm.get('rol')?.touched" 
                       class="mt-1 text-sm text-red-600 dark:text-red-400">
                    El rol es requerido
                  </div>
                </div>

                <!-- Es Principal -->
                <div class="flex items-center mt-6">
                  <label class="flex items-center">
                    <input
                      type="checkbox"
                      formControlName="es_principal"
                      class="h-4 w-4 text-orange-600 focus:ring-orange-500 border-gray-300 rounded">
                    <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">
                      Administrador Principal
                    </span>
                  </label>
                </div>
              </div>

              <div class="flex justify-end">
                <button
                  type="submit"
                  [disabled]="adminForm.invalid || addingAdmin"
                  class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 disabled:opacity-50 disabled:cursor-not-allowed">
                  <div *ngIf="addingAdmin" class="w-4 h-4 mr-2 animate-spin rounded-full border-2 border-white border-t-transparent"></div>
                  {{ addingAdmin ? 'Agregando...' : 'Agregar Administrador' }}
                </button>
              </div>
            </form>
          </div>
        </div>

        <!-- Current Administrators -->
        <div class="bg-white dark:bg-gray-800 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700">
          <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-medium text-gray-900 dark:text-white">
              Administradores Actuales ({{ emprendimiento.administradores?.length || 0 }})
            </h3>
          </div>
          <div class="p-6">
            
            <!-- Empty State -->
            <div *ngIf="!emprendimiento.administradores || emprendimiento.administradores.length === 0" 
                 class="text-center py-8">
              <svg class="mx-auto h-16 w-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
              </svg>
              <h3 class="mt-4 text-lg font-medium text-gray-900 dark:text-white">No hay administradores</h3>
              <p class="mt-2 text-gray-500 dark:text-gray-400">
                Agrega el primer administrador para este emprendimiento.
              </p>
            </div>

            <!-- Administrators List -->
            <div *ngIf="emprendimiento.administradores && emprendimiento.administradores.length > 0" 
                 class="space-y-4">
              <div *ngFor="let admin of emprendimiento.administradores; trackBy: trackByAdminId"
                   class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600">
                
                <div class="flex items-center space-x-4">
                  <!-- Avatar -->
                  <div class="w-12 h-12 bg-orange-100 dark:bg-orange-900/30 rounded-full flex items-center justify-center">
                    <ng-container *ngIf="admin.foto_perfil_url; else defaultAvatar">
                      <img [src]="admin.foto_perfil_url" 
                           [alt]="admin.name" 
                           class="w-12 h-12 rounded-full object-cover">
                    </ng-container>
                    <ng-template #defaultAvatar>
                      <svg class="w-6 h-6 text-orange-600 dark:text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                      </svg>
                    </ng-template>
                  </div>

                  <!-- User Info -->
                  <div>
                    <h4 class="text-lg font-medium text-gray-900 dark:text-white">{{ admin.name }}</h4>
                    <p class="text-sm text-gray-600 dark:text-gray-400">{{ admin.email }}</p>
                    <div class="flex items-center mt-1 space-x-2">
                      <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium"
                            [ngClass]="{
                              'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400': admin.pivot?.rol === 'administrador',
                              'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400': admin.pivot?.rol === 'colaborador',
                              'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-400': admin.pivot?.rol === 'moderador'
                            }">
                        {{ admin.pivot?.rol | titlecase }}
                      </span>
                      <span *ngIf="admin.pivot?.es_principal" 
                            class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400">
                        Principal
                      </span>
                    </div>
                  </div>
                </div>

                <!-- Actions -->
                <div class="flex items-center space-x-2">
                  <button
                    *ngIf="!admin.pivot?.es_principal"
                    (click)="removeAdministrador(admin)"
                    [disabled]="adminStates[admin.id!].removing"
                    class="inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-red-600 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50 disabled:cursor-not-allowed">
                    <div *ngIf="adminStates[admin.id!]?.removing" class="w-4 h-4 mr-1 animate-spin rounded-full border-2 border-red-400 border-t-transparent"></div>
                    <svg *ngIf="!adminStates[admin.id!]?.removing" class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                    </svg>
                    {{ adminStates[admin.id!].removing ? 'Eliminando...' : 'Eliminar' }}
                  </button>
                  
                  <span *ngIf="admin.pivot?.es_principal" 
                        class="text-sm text-gray-500 dark:text-gray-400 italic">
                    No se puede eliminar
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  `,
  styles: [`
    :host {
      display: block;
    }
  `]
})
export class AdministradoresListComponent implements OnInit {
  private emprendimientoAdminService = inject(EmprendimientoAdminService);
  private route = inject(ActivatedRoute);
  private fb = inject(FormBuilder);
  adminStates: { [key: number]: { removing?: boolean } } = {};

  emprendimientoId!: number;
  emprendimiento?: Emprendimiento;
  loading = true;
  error = '';
  addingAdmin = false;

  adminForm!: FormGroup;

  ngOnInit(): void {
    this.initForm();
    
    this.route.params.subscribe(params => {
      this.emprendimientoId = +params['id'];
      this.loadEmprendimiento();
    });
  }

  private initForm(): void {
    this.adminForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      rol: ['', Validators.required],
      es_principal: [false]
    });
  }

  loadEmprendimiento(): void {
    this.loading = true;
    this.error = '';

    this.emprendimientoAdminService.getEmprendimiento(this.emprendimientoId).subscribe({
      next: (data) => {
        this.emprendimiento = data;
        this.loading = false;
      },
      error: (err) => {
        console.error('Error al cargar emprendimiento:', err);
        this.error = err.error?.message || 'Error al cargar el emprendimiento';
        this.loading = false;
      }
    });
  }

  refreshData(): void {
    this.loadEmprendimiento();
  }

  async addAdministrador(): Promise<void> {
    if (this.adminForm.invalid || this.addingAdmin) return;

    this.addingAdmin = true;
    this.error = '';

    try {
      const adminData: AdminRequest = this.adminForm.value;
      
      await this.emprendimientoAdminService.addAdministrador(this.emprendimientoId, adminData).toPromise();
      
      // Reset form and reload data
      this.adminForm.reset({
        email: '',
        rol: '',
        es_principal: false
      });
      
      this.loadEmprendimiento();
      
      alert('Administrador agregado correctamente');
    } catch (err: any) {
      console.error('Error al agregar administrador:', err);
      this.error = err.error?.message || 'Error al agregar el administrador';
    } finally {
      this.addingAdmin = false;
    }
  }

  async removeAdministrador(admin: User): Promise<void> {
    if (!admin.id || this.adminStates[admin.id]?.removing || admin.pivot?.es_principal) return;

    const confirmMessage = `¿Estás seguro de que quieres eliminar a ${admin.name} como administrador?`;
    
    if (!confirm(confirmMessage)) return;

    this.adminStates[admin.id] = { removing: true };

    try {
      await this.emprendimientoAdminService.removeAdministrador(this.emprendimientoId, admin.id).toPromise();
      
      // Remove from local list
      if (this.emprendimiento?.administradores) {
        this.emprendimiento.administradores = this.emprendimiento.administradores.filter(a => a.id !== admin.id);
      }
      
      // Clean up state
      delete this.adminStates[admin.id];
      
      alert('Administrador eliminado correctamente');
    } catch (err: any) {
      console.error('Error al eliminar administrador:', err);
      alert(err.error?.message || 'Error al eliminar el administrador');
      this.adminStates[admin.id] = { removing: false };
    }
  }
  trackByAdminId(index: number, admin: User): number {
    return admin.id || index;
  }
}